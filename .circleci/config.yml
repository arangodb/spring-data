version: 2.1

parameters:
  docker-img:
    type: 'string'
    default: ""

commands:
  timeout:
    parameters:
      duration:
        default: '5m'
        type: 'string'
    steps:
      - run:
          name: Cancel job after <<parameters.duration>>
          background: true
          command: |
            sleep <<parameters.duration>>
            echo "Cancelling job as <<parameters.duration>> has elapsed"
            curl --fail -X POST -H "Circle-Token: ${CIRCLE_TOKEN}" "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}/cancel"
  start-db:
    parameters:
      docker-img:
        type: 'string'
        default: <<pipeline.parameters.docker-img>>
      topology:
        type: 'string'
        default: 'single'
    steps:
      - run:
          environment:
            DOCKER_IMAGE: <<parameters.docker-img>>
          name: Start Database
          command: ./docker/start_db.sh
  mvn-info:
    parameters:
      working_directory:
        type: 'string'
        default: ''
    steps:
      - run:
          name: mvn version
          working_directory: <<parameters.working_directory>>
          command: mvn --version
      - run:
          name: mvn dependency:tree
          working_directory: <<parameters.working_directory>>
          command: mvn dependency:tree
  mvn-install:
    steps:
      - run:
          name: mvn install
          command: mvn install -DskipTests=true -Dgpg.skip=true -Dmaven.javadoc.skip=true
  test:
    parameters:
      working_directory:
        type: 'string'
        default: ''
      protocol:
        type: 'string'
        default: 'HTTP2_JSON'
    steps:
      - run:
          name: Test
          working_directory: <<parameters.working_directory>>
          command: mvn -Darangodb.protocol=<<parameters.protocol>> test
  report:
    steps:
      - run:
          name: Create reports
          command: mvn -e surefire-report:report-only
      - store_artifacts:
          path: target/site
  load_cache:
    steps:
      - run:
          name: Generate Cache Checksum
          command: find . -name 'pom.xml' | sort | xargs cat > /tmp/maven_cache_seed
      - restore_cache:
          key: maven-{{ checksum "/tmp/maven_cache_seed" }}
  store_cache:
    steps:
      - save_cache:
          key: maven-{{ checksum "/tmp/maven_cache_seed" }}
          paths:
            - ~/.m2/repository

executors:
  j17:
    docker:
      - image: 'cimg/openjdk:17.0'
  j21:
    docker:
      - image: 'cimg/openjdk:21.0'

jobs:
  test:
    parameters:
      docker-img:
        type: 'string'
        default: <<pipeline.parameters.docker-img>>
      topology:
        type: 'string'
        default: 'single'
      protocol:
        type: 'string'
        default: 'HTTP2_JSON'
    executor: 'j21'
    steps:
      - timeout
      - checkout
      - setup_remote_docker
      - start-db:
          docker-img: <<parameters.docker-img>>
          topology: <<parameters.topology>>
      - load_cache
      - mvn-info
      - test:
          protocol: <<parameters.protocol>>
      - report
      - store_cache

  integration-test:
    parameters:
      docker-img:
        type: 'string'
        default: <<pipeline.parameters.docker-img>>
      spring-boot-version:
        type: 'string'
        default: '3.2.6'
    executor: 'j17'
    steps:
      - timeout
      - checkout
      - setup_remote_docker
      - start-db:
          docker-img: <<parameters.docker-img>>
      - run:
          name: Set Spring version
          working_directory: integration-tests
          command: sed -i "0,/<version>.*<\/version>/s//<version><<parameters.spring-boot-version>><\/version>/" pom.xml
      - load_cache
      - mvn-install
      - mvn-info:
          working_directory: integration-tests
      - test:
          working_directory: integration-tests
      - report
      - store_cache
  deploy:
    executor: 'j17'
    steps:
      - timeout
      - checkout
      - load_cache
      - mvn-info
      - run:
          name: Add GPG key
          command: echo $GPG_PRIVATE_KEY | base64 --decode | gpg --batch --no-tty --import --yes
      - run:
          name: Deploy to Apache Maven Central
          command: mvn -s .circleci/maven-release-settings.xml -DskipTests deploy
      - store_cache
workflows:
  test-adb-version:
    when:
      not: <<pipeline.parameters.docker-img>>
    jobs:
      - test:
          name: test-<<matrix.topology>>-<<matrix.docker-img>>
          matrix:
            parameters:
              docker-img:
                - 'docker.io/arangodb/arangodb:3.11'
                - 'docker.io/arangodb/arangodb:3.12'
              topology:
                - 'single'
                - 'cluster'
  test-adb-topology:
    when: <<pipeline.parameters.docker-img>>
    jobs:
      - test:
          name: test-<<matrix.topology>>
          matrix:
            parameters:
              topology:
                - 'single'
                - 'cluster'
  test-protocol:
    jobs:
      - test:
          name: test-<<matrix.protocol>>
          matrix:
            parameters:
              docker-img:
                - 'docker.io/arangodb/arangodb:3.11'
              protocol:
                - 'VST'
                - 'HTTP_VPACK'
                - 'HTTP_JSON'
                - 'HTTP2_VPACK'
                - 'HTTP2_JSON'
  test-spring-version:
    jobs:
      - integration-test:
          name: test-<<matrix.spring-boot-version>>
          matrix:
            parameters:
              spring-boot-version:
                - '3.2.6'
                - '3.3.0'
  deploy:
    jobs:
      - deploy:
          filters:
            tags:
              only: /^deploy.*/
            branches:
              ignore: /.*/